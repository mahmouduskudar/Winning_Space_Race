# -*- coding: utf-8 -*-
"""jupyter-labs-eda-sql-coursera_sqllite.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SIfyHXoOwtC78mGLaJXsqakhVDHy038u

<p style="text-align:center">
    <a href="https://skills.network" target="_blank">
    <img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png" width="200" alt="Skills Network Logo">
    </a>
</p>

<h1 align=center><font size = 5>Assignment: SQL Notebook for Peer Assignment</font></h1>

Estimated time needed: **60** minutes.

## Introduction
Using this Python notebook you will:

1.  Understand the Spacex DataSet
2.  Load the dataset  into the corresponding table in a Db2 database
3.  Execute SQL queries to answer assignment questions

## Overview of the DataSet

SpaceX has gained worldwide attention for a series of historic milestones.

It is the only private company ever to return a spacecraft from low-earth orbit, which it first accomplished in December 2010.
SpaceX advertises Falcon 9 rocket launches on its website with a cost of 62 million dollars wheras other providers cost upward of 165 million dollars each, much of the savings is because Space X can reuse the first stage.


Therefore if we can determine if the first stage will land, we can determine the cost of a launch.

This information can be used if an alternate company wants to bid against SpaceX for a rocket launch.

This dataset includes a record for each payload carried during a SpaceX mission into outer space.

### Download the datasets

This assignment requires you to load the spacex dataset.

In many cases the dataset to be analyzed is available as a .CSV (comma separated values) file, perhaps on the internet. Click on the link below to download and save the dataset (.CSV file):

 <a href="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv" target="_blank">Spacex DataSet</a>
"""

!pip install sqlalchemy==1.3.9

"""### Connect to the database

Let us first load the SQL extension and establish a connection with the database

"""

#Please uncomment and execute the code below if you are working locally.

#!pip install ipython-sql

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

import csv, sqlite3

con = sqlite3.connect("my_data1.db")
cur = con.cursor()

!pip install -q pandas==1.1.5

# Commented out IPython magic to ensure Python compatibility.
# %sql sqlite:///my_data1.db

import pandas as pd
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv")
df.to_sql("SPACEXTBL", con, if_exists='replace', index=False,method="multi")

"""**Note:This below code is added to remove blank rows from table**

"""

# Commented out IPython magic to ensure Python compatibility.
# %sql create table SPACEXTABLE as select * from SPACEXTBL where Date is not null

"""## Tasks

Now write and execute SQL queries to solve the assignment tasks.

**Note: If the column names are in mixed case enclose it in double quotes
   For Example "Landing_Outcome"**

### Task 1




##### Display the names of the unique launch sites  in the space mission

"""

import sqlite3

# Connect to the SQLite database
con = sqlite3.connect("my_data1.db")

# Create a cursor object
cur = con.cursor()

# Execute the SQL query to select distinct launch sites
cur.execute("SELECT DISTINCT \"Launch_Site\" FROM SPACEXTABLE")

# Fetch all the results
unique_launch_sites = cur.fetchall()

# Display the unique launch sites
for site in unique_launch_sites:
    print(site[0])

"""
### Task 2


#####  Display 5 records where launch sites begin with the string 'CCA'
"""

# Execute the SQL query to select distinct launch sites
cur.execute("SELECT * FROM SPACEXTABLE WHERE \"Launch_Site\" LIKE 'CCA%' LIMIT 5")

# Fetch all the results
unique_launch_sites = cur.fetchall()

# Display the unique launch sites
for site in unique_launch_sites:
    print(site[0])

"""### Task 3




##### Display the total payload mass carried by boosters launched by NASA (CRS)

"""

# Execute the SQL query to select total payload mass carried by boosters launched by NASA (CRS)
cur.execute("SELECT SUM(\"PAYLOAD_MASS__KG_\") AS \"Total Payload Mass (kg)\" FROM SPACEXTABLE WHERE \"Customer\" = 'NASA (CRS)'")

# Fetch the result
total_payload_mass = cur.fetchone()

# Display the total payload mass
print("Total Payload Mass carried by boosters launched by NASA (CRS):", total_payload_mass[0], "kg")

"""### Task 4




##### Display average payload mass carried by booster version F9 v1.1

"""

# Execute the SQL query to select total payload mass carried by boosters launched by NASA (CRS)
cur.execute("SELECT AVG(\"PAYLOAD_MASS__KG_\") AS \"Average Payload Mass (kg)\" FROM SPACEXTABLE WHERE \"Booster_Version\" = 'F9 v1.1'")

# Fetch the result
average_payload_mass = cur.fetchone()

# Display the total payload mass
print("Total Payload Mass carried by boosters launched by NASA (CRS):", average_payload_mass[0], "kg")

"""### Task 5

##### List the date when the first succesful landing outcome in ground pad was acheived.


_Hint:Use min function_

"""

# Execute the SQL query to list the date of the first successful landing outcome on the ground pad
cur.execute("SELECT MIN(Date) AS \"Date of First Successful Landing on Ground Pad\" FROM SPACEXTABLE WHERE \"Landing_Outcome\" = 'Success (ground pad)'")

# Fetch the result
first_successful_landing_date = cur.fetchone()

# Display the date of the first successful landing outcome on the ground pad
print("Date of First Successful Landing on Ground Pad:", first_successful_landing_date[0])

"""### Task 6

##### List the names of the boosters which have success in drone ship and have payload mass greater than 4000 but less than 6000

"""

# Execute the SQL query to list the names of the boosters meeting the criteria
cur.execute("SELECT DISTINCT \"Booster_Version\" FROM SPACEXTABLE WHERE \"Landing_Outcome\" = 'Success (drone ship)' AND \"PAYLOAD_MASS__KG_\" > 4000 AND \"PAYLOAD_MASS__KG_\" < 6000")

# Fetch all the results
boosters = cur.fetchall()

# Display the names of the boosters
for booster in boosters:
    print(booster[0])

"""### Task 7




##### List the total number of successful and failure mission outcomes

"""

# Execute the SQL query to count the total number of successful and failure mission outcomes
cur.execute("SELECT \"Mission_Outcome\", COUNT(*) AS \"Total\" FROM SPACEXTABLE GROUP BY \"Mission_Outcome\"")

# Fetch all the results
mission_outcomes = cur.fetchall()

# Display the total number of successful and failure mission outcomes
for outcome in mission_outcomes:
    print(outcome[0],  outcome[1])

"""### Task 8



##### List the   names of the booster_versions which have carried the maximum payload mass. Use a subquery

"""

# Execute the SQL query to list the names of the booster versions with the maximum payload mass
cur.execute("SELECT DISTINCT \"Booster_Version\" FROM SPACEXTABLE WHERE \"PAYLOAD_MASS__KG_\" = (SELECT MAX(\"PAYLOAD_MASS__KG_\") FROM SPACEXTABLE)")

# Fetch all the results
booster_versions = cur.fetchall()

# Display the names of the booster versions
for version in booster_versions:
    print(version[0])

"""### Task 9


##### List the records which will display the month names, failure landing_outcomes in drone ship ,booster versions, launch_site for the months in year 2015.

**Note: SQLLite does not support monthnames. So you need to use  substr(Date, 6,2) as month to get the months and substr(Date,0,5)='2015' for year.**

"""

# Execute the SQL query to list the records meeting the criteria
cur.execute("SELECT SUBSTR(Date, 6, 2) AS Month, \"Landing_Outcome\", \"Booster_Version\", \"Launch Site\" FROM SPACEXTABLE WHERE SUBSTR(Date, 0, 5)='2015' AND \"Landing_Outcome\" LIKE 'Failure (drone ship)'")

# Fetch all the results
records = cur.fetchall()

# Display the records
for record in records:
    print("Month:", record[0], "- Landing Outcome:", record[1], "- Booster Version:", record[2], "- Launch Site:", record[3])

"""### Task 10




##### Rank the count of landing outcomes (such as Failure (drone ship) or Success (ground pad)) between the date 2010-06-04 and 2017-03-20, in descending order.

"""

# Execute the SQL query to rank the count of landing outcomes
cur.execute("""
SELECT "Landing_Outcome", COUNT(*) AS "Count"
FROM SPACEXTABLE
WHERE Date BETWEEN '2010-06-04' AND '2017-03-20'
GROUP BY "Landing_Outcome"
ORDER BY "Count" DESC
""")

# Fetch all the results
landing_outcomes = cur.fetchall()

# Display all the results
for rank, outcome in enumerate(landing_outcomes, start=1):
    print("Rank:", rank, "- Landing Outcome:", outcome[0], "- Count:", outcome[1])

"""### Reference Links

* <a href ="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/Labs_Coursera_V5/labs/Lab%20-%20String%20Patterns%20-%20Sorting%20-%20Grouping/instructional-labs.md.html?origin=www.coursera.org">Hands-on Lab : String Patterns, Sorting and Grouping</a>  

*  <a  href="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/Labs_Coursera_V5/labs/Lab%20-%20Built-in%20functions%20/Hands-on_Lab__Built-in_Functions.md.html?origin=www.coursera.org">Hands-on Lab: Built-in functions</a>

*  <a  href="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/Labs_Coursera_V5/labs/Lab%20-%20Sub-queries%20and%20Nested%20SELECTs%20/instructional-labs.md.html?origin=www.coursera.org">Hands-on Lab : Sub-queries and Nested SELECT Statements</a>

*   <a href="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/Module%205/DB0201EN-Week3-1-3-SQLmagic.ipynb">Hands-on Tutorial: Accessing Databases with SQL magic</a>

*  <a href= "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/Module%205/DB0201EN-Week3-1-4-Analyzing.ipynb">Hands-on Lab: Analyzing a real World Data Set</a>

## Author(s)

<h4> Lakshmi Holla </h4>

## Other Contributors

<h4> Rav Ahuja </h4>

## Change log
| Date | Version | Changed by | Change Description |
|------|--------|--------|---------|
| 2021-07-09 | 0.2 |Lakshmi Holla | Changes made in magic sql|
| 2021-05-20 | 0.1 |Lakshmi Holla | Created Initial Version |

## <h3 align="center"> © IBM Corporation 2021. All rights reserved. <h3/>
"""